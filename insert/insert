#!/bin/bash

# check if table file exists 
function duplicatedTable(){
    #echo $1
    if [[ -f $1 ]] 
    then
       # echo "duplicated file name "
        return 0
    else 
        return 1
    fi

}
# a function that will check is the 
function checkTypeofInt(){
    # $1 -> for val name
    if [[ $1 =~ ^[0-9]+$ ]]
    then 
        return 0
    else 
        return 1
    fi
}

function checkTypeofSTring(){
   if  [[ $1 =~ ^[a-zA-Z]+$ ]]
   then
        return 0
    else
        return 1
    fi
}

function checkTypeofCol1(){ # dupricated -> not used
    # $1 -> for val col
    # 
    if checkTypeofInt $1 -a $2 -eq "int" #both f type if -> match types
    then 
        echo "col of type int "
        return 0
    elif checkTypeofSTring $1 -a $2 -eq "string" #both f type if -> match types
    then 
        echo "col of type string"
        return 0

    else 
        echo "type of col dnt match"
        return 1
    fi
}

function checkTypeofCol(){
    case $2 in 
        "int" )
            if checkTypeofInt $1 
            then 
                return 0
            else 
                return 1
            fi 
            ;;

        "string" )
            if checkTypeofSTring $1 
            then 
                return 0
            else 
                return 1
            fi
            ;;
        * )
			return 1
			;;
    esac
}

function getColsumbers(){
    ## GET table name as parameter of this function :)" -> from meta file
	ColsNumber=$(awk -F : 'NR==1{print $2}' $1)
	#echo $ColsNumber
}

function getColsNameAndTypes(){
    # get cols name and heaser 
    # get table name from meta file as a parameter
	colHeaders=($(awk -F : 'NR!=1{print $1}' $1))
	colType=($(awk -F : '{print $3}' $1))
	# echo ${colHeaders[@]}
	# echo ${colType[@]}
}

function insertIntoTable(){
   # table_file="$path/$table_name"
    echo $newRecord
    echo $newRecord >> $1

}

function getfielddNumber(){
    # number of records -> number of lines 
    # get table name  as a parameter -> actual table file :)"
    #let NR=$(awk -F : '{print NR}' $1)
    # echo $1
    # to handle autoinc pkval

    let NR=$(awk 'END { print NR }' $1)
}

# a function that will handel adding col val along with  validating its  its types
function InsertIntoColumns(){
    ## GET table name `from meta folder` as parameter of this function :)"
    getColsumbers $1

    # getfielddNumber -> GET number of records
    getfielddNumber $table # number of lines in table for autoincrement PK
    let index=1 # to ignore the headers -> cols name at first
    newRecord="$NR:" # auto inc pk val 

    # keep tracking of the last col indx -> to skip adding 
        # `:` and the end of record line 
    let lastindx=$ColsNumber-1 

    if checkTypeofInt $ColsNumber
    then 
        
        while [ $ColsNumber -gt $index ]
        do
           
        	read -p "write value of the '${colHeaders[index]}' column : " col_val
            if checkTypeofCol $col_val ${colType[index]}
            then
                echo "col val inserted successfully"
                if [ $index -eq $lastindx ]
                then
                    newRecord+="$col_val"
                else 
                    newRecord+="$col_val:"
                fi
                let index+=1;
            else
                echo "type of col val doesn't match"
            fi 
        done
        else 
            echo "not a valid number of columns -> table with no cols"
        fi
}

### START FROM HERE .....

# insert into tablename
# cmd    $1    $2


table_file=$PWD/data/$connected_db/metaData/$2 ## meta file

table=$PWD/data/$connected_db/$2 # table file


if duplicatedTable $table
then

    getColsNameAndTypes $table_file
    # insert into table 
    echo "cols name of $2 "
    echo ${colHeaders[@]}
    echo "---------------------"

    InsertIntoColumns $table_file
    insertIntoTable $table

else 
    echo "table does't exist"
fi